
Changelog
---------
(Log is also included in carbon.sh)
#
#
#	carbon
#   v20141201
#   - Added Yosemite into list of supported systems. 
#   v20141128
#   - fix for directory not found line 393
#   - potential fix for exit 73
#   v20141030
#   - cfTARGET.CHECK line 562 changed to avoid exitting the script unintentionally
#       even when a target directory can be created.
#   v20141021
#   - Broke many things. Script exits shortly after starting.
#   - sizeRAW was breaking the interface, should no properly print to the Start
#       interface in location 8 32.
#   - cfLOGGER.file reported illegal option " --l". Option for "l" was provided,
#       but the getopts opt had only "te" options available. Changed this to "let"
#       to solve.
#   - Line 568 (if [ $cfDMG -eq 1 ];) was returning an error for cfDISKPACE()
#       "[: -eq:] unary operator expected". This was because cfDMG did not have a default
#       value, and beause the var name was the same as a function. Switched the var name
#       to cfDMGSET and set a default value of 0. Should allow cfDISKSPACE to function 
#       properly if we are not asking for a disk image to be created (no more unary 
#       operator error).
#   - Line 551 complex and/or broke the script. 
#       sudo mkdir "$target" && cfLOGGER.file -l "Created target directory: $target" 
#       || cfLOGGER.file -t "cfTARGET [ERROR]:[EX-CANTCREAT]:73 Destination is read-only." && exit 73
#       Was supposed to make the target directory and print a success message to the logs,
#       or report as read only and exit with a failure. Ended up creating the directory, writing success
#       and exiting with failure. Second half (the or) has been commented out until we figure out
#       how to do so properly.
#   v20141015
#   - cfINTERFACE edited to have a beggining, middle and end interface.
#   - sizeRAW calculation updated. Prints top-level directory to cfINTERFACE.open
#       position 8.32 as du is calculating. See the below forum post.
#   http://www.unix.com/shell-programming-and-scripting/251905-tee-multiple-streams-create-var.html#post302921182
#   
#   v20141005
#   - cfINTERFACE Changed 1st line for end user readability, and to better indicate our
#       (E)stimated (D)ate of (C)ompletion. Function integration is in progress.
#   v20141004
#   - cfINTERFACE resizes the terminal window and positions it in the top left corner of the 
#       display. It then builds a simple textual interface. Function is added, but not yet
#       implimented.
#   v20140914
#   - Target checking is handled in one function. Code cleaning.
#   v20140911
#   - Error logging and parsing of log file from ditto is handled within the function cLOGGER
#       using nested functions clogger.file and clogger.ditto respectively. This grouping of
#       functions is initialized during script startup. At this point, these functions should
#       handle all the same error reporting and file logging. Log parsing should be much better.
#   v20140908
#   - Breaking things. Adding in error logging and checking for ditto, and making a large 
#       change to the way this happens. Until this is incorporated, some variables are
#       broken. Notably, the new variables for $lastERROR and $lastFERROR. Once the logging
#       function is fully replaced/implimented, these variables will be working again. Until
#       then, use an older version.
#   V20140904
#   - New version of dittoERR (). This version searches subsections of the ditto log file
#       and parses errors into one of two arrays (aERROR, or aFILE). Two arrays may be 
#       overkill for this, we may change it in the future. 
#   - Added output to display the last error recorded in the ditto log file.
#   v20140829
#   - Removed "512" from the calculation for sizeInitial. This was one cause for incorrect 
#       initial values, and incorrect percentage of completion reports.
#   - Legacy flag options 'm' and 's' removed. 
#   v20140822
#   - Began working through data from log dumps. Have only gotten through the initial phase
#       (pre-copy). Lot of data to wade through and validate.
#   - Working on time calculations. Two options. One using a longer decimal value and time
#       intensive calculations. The other is to make date do the math.
#   v20140821
#   - More logging.
#   - targTEST -- if [[ -d $(dirname "$target") ]] && [[ "$tarTEST" != "Volumes" ]]
#       Should test target directory and verify we are not creating a folder in "Volumes".
#   v20140807
#   - Adding error numbers for logging. See /usr/include/sysexits.h. File can be found at:
#       http://www.opensource.apple.com/source/Libc/Libc-320/include/sysexits.h
#   v20140805
#   - New calculation for space used. 
#   v20140312
#   - Removed option to clear messages database. Issue was resolved in 10.8.3 update.
#   - Update: additional logging for OS version verification steps.
#   - Update: added Mavericks to supported OS. Still needs testing to verify, but everything
#       should work without issue.
#	v20130613
#	- corrected the name of the log files
#   v20130521a
#   - While loop using tput cup to position the cursor instead of clearing the screen.
#	v20121027a (10.8 Fork)
#	- Testing begins for using with Mountain Lion.
#	- Added mountain lion to list of supported OS versions to begin to allow testing.
#	- Passed myLOGGER "$0 $- $@" to add the full command into the logs.
#	- Added a printed output to request all logs and a description of any success or failure.
#	v20120531
#	- $SOURCELIST was breaking when filenames contained spaces. Added temporary storage for IFS, 
#		and switched IFS=$(echo -en "\n\b"). This should allow for spaces in names. CLI testing
#		shows that it will work.
#	v20120527
#	- Changed disk image creation from type SPARSE to SPARSEBUNDLE to allow for creation on
#		fat32 formatted drives.
#	v20120516
#	- Resumed use of runtime () to calculate scriptRUNTIME. This combined with the
#		use of an array with ditto provides proper while looping feedback.
#		Prior to this, script was backgrounding multiple instances of ditto and exiting
#		before all data was copied.
#	- Added a new log file for ditto background process. $clog=carbon.copy.log
#	- Changed myTARGET test. If function is unable to create the directory, an error
#		is reported that the drive is read-only.
#	- Function isCOMPLETE generated an error in the calculation to determine if the copy
#		is complete or not. percentCOMPLETE was scaled to a precision of 2, causing the if
#		statement to always show that the copy exited early. Changed scale of precision to 0.
#		This resolves the error since bc is required for any float calculations. if is
#		changed to look for -ge 99 instead of -gt 99.
#	- Realized that in a prior revision, I removed refresh. This also removed allocation of
#		$source and $target. Added this back in just after running checkDIR.
#	- dittoERROR has been added into the final report just after isCOMPLETE. This should 
#		report any error messages.
#   v20120506
#   - Removed refresh rate options as they are never used.
#   - Created mySCALE function for code reuse.
#   - Removed older entries from embeded changelog.
#   v20120505
#   - Added -t option to myLOGGER calls. Allows message to be displayed on screen and 
#       saved to a log file.
#   v20120425
#   - Trying to redirect stdout/err to function myERROR.
#	v20120424
#	- In last testing, refresh rate of 30 seconds seemed to be too long. With the new for
#		loop, we are waiting on the information loop to transferring new files. Ditto
#		no longer has a constant stream of data. Changed default refresh to 10 seconds, 
#		may also try 5.
#	- Changed the test on the while loop to [ -n $i ], so that we are testing to see if 
#		$i contains data. This may work or may break use of ditto, as it possibly could
#		fail to pass back to the parent for loop.
#	- Since the while loop no longer tests runtime, we are commenting out. Runtime and 
#		all calls to it will be removed in future versions.
#	- Verified that $SECONDS can be passed to myTime function and provide proper results.
#	v20120421a
#	- Remove ;;s from line 719 wich was causing the script to error.
#	- Resolved array usage with ditto.
#	- Resolved array stepping with for loop.
#	- Elapsed time is now based on bash default variable $SECONDS
#
#	- TODO: Still need a valid method for the while loop (runtime of ditto is no longer good)
#			Need an adjusted method of reporting time elapsed.
#			Need to ensure the disk image function properly resets the target.
#			myLOGGER may not be functioning in the loops.
#	v20120415a
#	- Removed needlessly duplicated code in the section following getopts.
#	- New functions. 
#	- myLOGGER provides a method for appending log messages to a log file, splitting between
#		the regular log file and the error log file.
#	- Reattempting to split output of ditto to two log files.
#	V20120403A
#	- Completed first version of for loop management for Volumes folder. Folder should be
#		skipped during data transfer.
#	- Cleanup
#	- New code for reporting location should be simpler and hopefully faster as well as
#		actually work. Fingers crossed.
#	v20120402a
#	- Adding a for loop around the while loop to get rid of the Volumes folder deletion.
#	v20120324a
#	- Renaming script. Why? Because I want to. Also because carbon can autocomplete with a tab.
#	- Also reexamining versioning.
#
#   Script renamed. Some functionality has been removed to reduce bloat and because it was 
#   rarely used to the point that if we needed to do so, it was just as easy to look it up.
#   New name more accurately reflects original and current intent.
#	v1.7.3b
#	- Changes to determine whether all data was copied or not. Added two new functions
#		to facilitate this process. myERRORCOUNT and myFILECOUNT
#	v1.7.2b
#	- Further refinement of error reporting and logging. 
#	- Simplified log filename to plus.current.log.
#	- Fixed error report if statements.
#	- Change in reporting of last file copied. Currently should echo the full path of file.
#	v1.7.1b
#	- Made error scanning a function and added a call to the end of the script to report
#		what may have caused ditto to exit.
#	- Adding to the error reporting for ditto to make it more robust.
#	v1.7b
#	- Added a new section to the loop to display transfer rate speeds. 
#	- Added a new calculation to the after loop display to provide the average 
#		transfer rate.
#	v1.6.5
#	- Altered the runtime test to be -n instead of -ge. Test should now properly show 
#		time elapsed based on output from ps.
#   v1.6.4
#   - Modified $total_time to not divide by 60. This was throwing off time calculations 
#       for the total time involved.
#   - Modified while loop call to runtime(). Loop will now print runtime in separated 
#       hours, minutes and seconds instead of colon seperated.
#   - Realized the new runtime call would fail to execute properly if seconds contained 
#       a 0. Altered the call to be -ge.
#   v1.6.3
#   - Modified myTime to account for hours as well as minutes and seconds
#   - Added hours to output in order to make it easier to understand times.
#	- Updated the manual to remove two flags no longer used (-k, -x)
#	v1.6.2
#	- Call to myHelp from getopts was broken at some point in the past. Fixed this.
#	v1.6.1
#	- Changed the way it saves the log file from ditto. plus$start_time.log
#	- Working on modification of time reporting.
#	- Working on modification of data reporting for ditto progress and location.
#	v1.6.0
#	- Added new code to check the version of the current OS and verify compatibility before 
#		continuing.
#	- Code modifications to remove existing pluslog files prior to creating a new file.
#	- Code modification to better reflect transfer speeds of failing or corrupted drives.
#	- Code modification to resolve a problem with time calculation ($total_time).
#
#   List of bug fixes:
#	v1.5.4b
#	- Reverting our use of ditto and instead are removing the /Volumes folder prior to copy.
#	- Set debug on as default for the script to continue monitoring use. Removed the getopts
#		'x' option to enable debug, and removed code to turn debug on or off.
#   v1.5.3b
#   - update to the ditto command request. xargs was causing ditto to place /Macintosh HD/
#       at the root level of the drive we were copying to. Since this is unacceptable, and
#       we still need to try to keep the /Volumes folder from being copied, we are switching
#       to a single command using find -exec to locate the files and pass them to ditto
#	
#   - Unimplimented functions added to facilite streamlining of code. Fewer repetitions.
#   v1.5.1
#   - while [ -n $scriptRUNTIME ] was not properly causing the script to terminate when ditto
#       completed. Added double quotes to the variable name to properly evaluate it.
#   - scriptRUNTIME was calling ps without the -c option. This could cause scriptRUNTIME to
#       get the run time of the grep command being used to search the output of ps. If this 
#       were to happen, it might cause incorrect times or might cause the script to never terminate.
#	v1.5
#	- Sometimes the Volumes folder shows up within the root level of the hard drive 
#		(/Macintosh HD/Volumes/). Rewrote the use of ditto to avoid copying all of the volumes
#		connected. This is acheived by listing the contents of the source into an array (minus 
#		Volumes), and the passing the contents of that array via xargs into ditto.
#	- Added a new function pathString. pathString helps with the new use of ditto by checking
#		the source and target variables for a trailing '/'. If none is found, one is appended.
#	v1.4.5
#	- Set a default for variable debugON in order to not have an error when that line is parsed.
#	V1.4.4
#   - Changes to the way sizes are grabbed from du and df. df size was passing a newline 
#       character before the number causing a parse error for bc.
#   - Changes to use of command pipe strings in creating new variables. Replacing back-
#       ticks with $(). Back-ticks are an archaic format.
#   - Simplification of if statements. Create local variables to pass instead of creating 
#       two versions of one calculation.
#   v1.4.3
#	- Code change to resolve a possible error with the final While loop. Changed the test 
#       from $scriptRUNTIME > 0 to -n $scriptRUNTIME. This should avoid the scenario where 
#       it reports an error that a unary operator was expected in the while loop evaluation.
#	- Temporarily commented out the reporting feature for errors and current directory 
#       location. Example log files are needed in order to properly prepare for all 
#       reporting situations and provide accurate information.
#
#   v 1.4.1b
#   - Code changes once again to fixe time estimates and size calculations. du and df use 
#       1024 bytes as the root for calculating human readable sizes. Since Snow Leopard 
#       and Lion use 1000 bytes as the root to more accurately reflect the sizes of drives 
#       in "human" readable format, our calculations reflect this as well. We may split
#       code base to have a separate pre-SL version in order to keep consistency between 
#       the GetInfo window and sizes reported during the copy of data.
#   - Still working on the reporting of locations during the file copy as well as reporting 
#       of errors.
#   v 1.4b
#	- Code changes to fix time estimates. Estimates were incorrectly calculated in previous 
#       version, and are now more accurately reported. 
#	- Time estimate for Thunderbolt has been added, and is based upon a test performed by 
#       thenextweb.com
#	- changes to the way flags are handled to simplify the code, and in preparation for 
#       resolving an issue where the command is called with arguments but no flags and 
#       runs without error and without copying data. With no error, the user is left 
#       wondering why the command did not work. Script needs to handle this situation 
#       gracefully and provide feedback to properly inform the user of how to resolve the 
#       issue.
#	1.3b
#	- Code additions to report on current directory and last error.
#	- Code additions to provide time estimates for Thunderbolt.
#	1.2.4
#	- Resolved long standing issue where the command could be called with a destination 
#       and source but no options. Command would run with no errors, and exit without 
#       performing a copy of data. By setting an expected value for number of 
#       strings/arguments and testing for that, we now get an error message instead.
#	1.2.3
#	- Lion breaks greps use of the -o (only matching) option in conjuction with matching digits. 
#	    Switched to -e (expression) matching in order to resolve this. This option also shortens 
#       the command.
#	1.2.2
#	- Additional corrections to the variables to check the source location.
#	1.2.1
#	- While loop now tests based on scriptRUNTIME variable, and exits properly when complete.
#	1.2.0
#       - Rewrite of script to try to clean up the code. Variable names should better reflect 
#           their purpose. New function myTime to handle decimal time and present it in a 
#           human readable format. Removed some deprecated commented code that may confuse someone
#           reading through the script.
#	- Removed bugs dealing with some of the variables and causing output of sizes to be incorrect.
#       1.1.2
#       - While loop now uses calculations to determine the scale of the data copied 
#         in order to better present information (i.e. MB for sizes below .9GB)
#       - du is still used in one location, when determining the size of data to be copied
#           if the source is a folder. This is still useable in this instance, as it is only
#           run once and stored in a variable. User is warned that it will take some time
#           to determine the amount of data to copy when using this method.
#       1.1.1b
#       - Discontinue use of du command to check size of data copied.
#           du can take too long to check size of a directory when multiple
#           gigabytes of data are involved, and will cause a slow down of
#           the refresh of information as well as the process of copying data.
#       1.1.0 
#       - Adjusted diskSpace if statement to correctly asses sizes
#       - Adjusted use of df to correctly grab drive size
#       1.0.9
#       - Added two temporary variables to allow us to compare the source location 
#			to the drives in the /Volumes folder. Allows us to determine the proper
#			way to check file sizes of the source.
#   	1.0.6b
#       - More code changes to try to handle spaces in filenames
#			when passing data to ditto.
#		- Removed function to call man page from within script, as the man page
#			will properly call with the command 'man plus'.
#		- Removed unused uid variable and the unusable function to call ditto with
#			or without sudo.
#		- Removed debug 'echo' lines.
#		1.0.5 final
#		- Added double quotes to source and target variables to properly handle spaces
#	
#   	1.0.5b
#       - Code changes to try to handle spaces in filenames
#           when passing data to ditto.
#		- Code changes in use of 'du' to better handle disk space sizes.
#       1.0.2 resolved a problem in the handling of options by
#       breaking down the routine into two case statements.
#
#   But wait, where is all the stuff that happened before this? Well, as magical a time as
#   it was it is lost to the annals of history. Or not. I was spending so much time just
#   trying to figure out this scripting and versioning business that I completely ignored
#   the bits about logging changes. I should probably be drawn and quartered by those in
#   charge, however since it is I that am in charge of this monstrosity I have deemed 
#   such measures too barbaric. I suppose that I could sack the editor, but that job
#   also falls under my purview so I've decided to just let bygones be bygones. 
#
#   Did you really read all of this? Wow. Really, just wow. I don't know if I should be
#   impressed or concerned.